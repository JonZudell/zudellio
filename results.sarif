{"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json", "version": "2.1.0", "runs": [{"tool": {"driver": {"name": "Checkov", "version": "3.2.310", "informationUri": "https://checkov.io", "rules": [{"id": "CKV_AWS_61", "name": "Ensure AWS IAM policy does not allow assume role permission across all services", "shortDescription": {"text": "Ensure AWS IAM policy does not allow assume role permission across all services"}, "fullDescription": {"text": "Ensure AWS IAM policy does not allow assume role permission across all services"}, "help": {"text": "Ensure AWS IAM policy does not allow assume role permission across all services\nResource: module.infrastructure.aws_iam_role.AdminAccessSSOFromRoot"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-iam-policies/bc-aws-iam-45"}, {"id": "CKV_AWS_53", "name": "Ensure S3 bucket has block public ACLS enabled", "shortDescription": {"text": "Ensure S3 bucket has block public ACLS enabled"}, "fullDescription": {"text": "Ensure S3 bucket has block public ACLS enabled"}, "help": {"text": "Ensure S3 bucket has block public ACLS enabled\nResource: module.production.aws_s3_bucket_public_access_block.static_website_public_access_block"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/bc-aws-s3-19"}, {"id": "CKV_AWS_54", "name": "Ensure S3 bucket has block public policy enabled", "shortDescription": {"text": "Ensure S3 bucket has block public policy enabled"}, "fullDescription": {"text": "Ensure S3 bucket has block public policy enabled"}, "help": {"text": "Ensure S3 bucket has block public policy enabled\nResource: module.production.aws_s3_bucket_public_access_block.static_website_public_access_block"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/bc-aws-s3-20"}, {"id": "CKV_AWS_55", "name": "Ensure S3 bucket has ignore public ACLs enabled", "shortDescription": {"text": "Ensure S3 bucket has ignore public ACLs enabled"}, "fullDescription": {"text": "Ensure S3 bucket has ignore public ACLs enabled"}, "help": {"text": "Ensure S3 bucket has ignore public ACLs enabled\nResource: module.production.aws_s3_bucket_public_access_block.static_website_public_access_block"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/bc-aws-s3-21"}, {"id": "CKV_AWS_56", "name": "Ensure S3 bucket has 'restrict_public_buckets' enabled", "shortDescription": {"text": "Ensure S3 bucket has 'restrict_public_buckets' enabled"}, "fullDescription": {"text": "Ensure S3 bucket has 'restrict_public_buckets' enabled"}, "help": {"text": "Ensure S3 bucket has 'restrict_public_buckets' enabled\nResource: module.production.aws_s3_bucket_public_access_block.static_website_public_access_block"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/bc-aws-s3-22"}, {"id": "CKV_AWS_338", "name": "Ensure CloudWatch log groups retains logs for at least 1 year", "shortDescription": {"text": "Ensure CloudWatch log groups retains logs for at least 1 year"}, "fullDescription": {"text": "Ensure CloudWatch log groups retains logs for at least 1 year"}, "help": {"text": "Ensure CloudWatch log groups retains logs for at least 1 year\nResource: module.development.aws_cloudwatch_log_group.lambda_log_group"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/bc-aws-338"}, {"id": "CKV_AWS_158", "name": "Ensure that CloudWatch Log Group is encrypted by KMS", "shortDescription": {"text": "Ensure that CloudWatch Log Group is encrypted by KMS"}, "fullDescription": {"text": "Ensure that CloudWatch Log Group is encrypted by KMS"}, "help": {"text": "Ensure that CloudWatch Log Group is encrypted by KMS\nResource: module.development.aws_cloudwatch_log_group.lambda_log_group"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-cloudwatch-log-group-is-encrypted-by-kms"}, {"id": "CKV_AWS_120", "name": "Ensure API Gateway caching is enabled", "shortDescription": {"text": "Ensure API Gateway caching is enabled"}, "fullDescription": {"text": "Ensure API Gateway caching is enabled"}, "help": {"text": "Ensure API Gateway caching is enabled\nResource: module.development.module.api_gateway.aws_api_gateway_stage.production"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-api-gateway-caching-is-enabled"}, {"id": "CKV_AWS_73", "name": "Ensure API Gateway has X-Ray Tracing enabled", "shortDescription": {"text": "Ensure API Gateway has X-Ray Tracing enabled"}, "fullDescription": {"text": "Ensure API Gateway has X-Ray Tracing enabled"}, "help": {"text": "Ensure API Gateway has X-Ray Tracing enabled\nResource: module.development.module.api_gateway.aws_api_gateway_stage.production"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/logging-15"}, {"id": "CKV_AWS_308", "name": "Ensure API Gateway method setting caching is set to encrypted", "shortDescription": {"text": "Ensure API Gateway method setting caching is set to encrypted"}, "fullDescription": {"text": "Ensure API Gateway method setting caching is set to encrypted"}, "help": {"text": "Ensure API Gateway method setting caching is set to encrypted\nResource: module.development.module.api_gateway.aws_api_gateway_method_settings.production"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-308"}, {"id": "CKV_AWS_290", "name": "Ensure IAM policies does not allow write access without constraints", "shortDescription": {"text": "Ensure IAM policies does not allow write access without constraints"}, "fullDescription": {"text": "Ensure IAM policies does not allow write access without constraints"}, "help": {"text": "Ensure IAM policies does not allow write access without constraints\nResource: module.development.module.api_gateway.aws_iam_role_policy.api_gateway_cloudwatch_policy"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-iam-policies/bc-aws-290"}, {"id": "CKV_AWS_355", "name": "Ensure no IAM policies documents allow \"*\" as a statement's resource for restrictable actions", "shortDescription": {"text": "Ensure no IAM policies documents allow \"*\" as a statement's resource for restrictable actions"}, "fullDescription": {"text": "Ensure no IAM policies documents allow \"*\" as a statement's resource for restrictable actions"}, "help": {"text": "Ensure no IAM policies documents allow \"*\" as a statement's resource for restrictable actions\nResource: module.development.module.api_gateway.aws_iam_role_policy.api_gateway_cloudwatch_policy"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-iam-policies/bc-aws-355"}, {"id": "CKV_AWS_163", "name": "Ensure ECR image scanning on push is enabled", "shortDescription": {"text": "Ensure ECR image scanning on push is enabled"}, "fullDescription": {"text": "Ensure ECR image scanning on push is enabled"}, "help": {"text": "Ensure ECR image scanning on push is enabled\nResource: module.infrastructure.module.ecr.aws_ecr_repository.lambda_repo"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/general-8"}, {"id": "CKV_AWS_136", "name": "Ensure that ECR repositories are encrypted using KMS", "shortDescription": {"text": "Ensure that ECR repositories are encrypted using KMS"}, "fullDescription": {"text": "Ensure that ECR repositories are encrypted using KMS"}, "help": {"text": "Ensure that ECR repositories are encrypted using KMS\nResource: module.infrastructure.module.ecr.aws_ecr_repository.lambda_repo"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-ecr-repositories-are-encrypted"}, {"id": "CKV_AWS_51", "name": "Ensure ECR Image Tags are immutable", "shortDescription": {"text": "Ensure ECR Image Tags are immutable"}, "fullDescription": {"text": "Ensure ECR Image Tags are immutable"}, "help": {"text": "Ensure ECR Image Tags are immutable\nResource: module.infrastructure.module.ecr.aws_ecr_repository.lambda_repo"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-general-24"}, {"id": "CKV_AWS_70", "name": "Ensure S3 bucket does not allow an action with any Principal", "shortDescription": {"text": "Ensure S3 bucket does not allow an action with any Principal"}, "fullDescription": {"text": "Ensure S3 bucket does not allow an action with any Principal"}, "help": {"text": "Ensure S3 bucket does not allow an action with any Principal\nResource: module.development.module.interface.aws_s3_bucket_policy.zudellio_bucket_policy"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/bc-aws-s3-23"}, {"id": "CKV_AWS_50", "name": "X-Ray tracing is enabled for Lambda", "shortDescription": {"text": "X-Ray tracing is enabled for Lambda"}, "fullDescription": {"text": "X-Ray tracing is enabled for Lambda"}, "help": {"text": "X-Ray tracing is enabled for Lambda\nResource: module.development.module.lambdas.aws_lambda_function.lambda"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-serverless-policies/bc-aws-serverless-4"}, {"id": "CKV_AWS_117", "name": "Ensure that AWS Lambda function is configured inside a VPC", "shortDescription": {"text": "Ensure that AWS Lambda function is configured inside a VPC"}, "fullDescription": {"text": "Ensure that AWS Lambda function is configured inside a VPC"}, "help": {"text": "Ensure that AWS Lambda function is configured inside a VPC\nResource: module.development.module.lambdas.aws_lambda_function.lambda"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-aws-lambda-function-is-configured-inside-a-vpc-1"}, {"id": "CKV_AWS_116", "name": "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)", "shortDescription": {"text": "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)"}, "fullDescription": {"text": "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)"}, "help": {"text": "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)\nResource: module.development.module.lambdas.aws_lambda_function.lambda"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-aws-lambda-function-is-configured-for-a-dead-letter-queue-dlq"}, {"id": "CKV_AWS_272", "name": "Ensure AWS Lambda function is configured to validate code-signing", "shortDescription": {"text": "Ensure AWS Lambda function is configured to validate code-signing"}, "fullDescription": {"text": "Ensure AWS Lambda function is configured to validate code-signing"}, "help": {"text": "Ensure AWS Lambda function is configured to validate code-signing\nResource: module.development.module.lambdas.aws_lambda_function.lambda"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-272"}, {"id": "CKV_AWS_115", "name": "Ensure that AWS Lambda function is configured for function-level concurrent execution limit", "shortDescription": {"text": "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"}, "fullDescription": {"text": "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"}, "help": {"text": "Ensure that AWS Lambda function is configured for function-level concurrent execution limit\nResource: module.development.module.lambdas.aws_lambda_function.lambda"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-aws-lambda-function-is-configured-for-function-level-concurrent-execution-limit"}, {"id": "CKV_AWS_28", "name": "Ensure DynamoDB point in time recovery (backup) is enabled", "shortDescription": {"text": "Ensure DynamoDB point in time recovery (backup) is enabled"}, "fullDescription": {"text": "Ensure DynamoDB point in time recovery (backup) is enabled"}, "help": {"text": "Ensure DynamoDB point in time recovery (backup) is enabled\nResource: aws_dynamodb_table.zudellio_contact"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/general-6"}, {"id": "CKV_AWS_119", "name": "Ensure DynamoDB Tables are encrypted using a KMS Customer Managed CMK", "shortDescription": {"text": "Ensure DynamoDB Tables are encrypted using a KMS Customer Managed CMK"}, "fullDescription": {"text": "Ensure DynamoDB Tables are encrypted using a KMS Customer Managed CMK"}, "help": {"text": "Ensure DynamoDB Tables are encrypted using a KMS Customer Managed CMK\nResource: aws_dynamodb_table.zudellio_contact"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-52"}, {"id": "CKV_DOCKER_2", "name": "Ensure that HEALTHCHECK instructions have been added to container images", "shortDescription": {"text": "Ensure that HEALTHCHECK instructions have been added to container images"}, "fullDescription": {"text": "Ensure that HEALTHCHECK instructions have been added to container images"}, "help": {"text": "Ensure that HEALTHCHECK instructions have been added to container images\nResource: /lambdas/healthcheck/get/Dockerfile."}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-that-healthcheck-instructions-have-been-added-to-container-images"}, {"id": "CKV_DOCKER_3", "name": "Ensure that a user for the container has been created", "shortDescription": {"text": "Ensure that a user for the container has been created"}, "fullDescription": {"text": "Ensure that a user for the container has been created"}, "help": {"text": "Ensure that a user for the container has been created\nResource: /lambdas/healthcheck/get/Dockerfile."}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-that-a-user-for-the-container-has-been-created"}], "organization": "bridgecrew"}}, "results": [{"ruleId": "CKV_AWS_61", "ruleIndex": 0, "level": "error", "attachments": [], "message": {"text": "Ensure AWS IAM policy does not allow assume role permission across all services"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/main/infra_account/main.tf"}, "region": {"startLine": 69, "endLine": 84, "snippet": {"text": "resource \"aws_iam_role\" \"AdminAccessSSOFromRoot\" {\n  provider = aws.target\n  name     = \"AdminAccessSSOFromRoot\"\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\",\n    Statement = [\n      {\n        Effect = \"Allow\",\n        Principal = {\n          AWS = \"arn:aws:iam::${var.root_account_id}:root\"\n        },\n        Action = \"sts:AssumeRole\"\n      }\n    ]\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AWS_61", "ruleIndex": 0, "level": "error", "attachments": [], "message": {"text": "Ensure AWS IAM policy does not allow assume role permission across all services"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/main/nonroot_account/main.tf"}, "region": {"startLine": 34, "endLine": 49, "snippet": {"text": "resource \"aws_iam_role\" \"AdminAccessSSOFromRoot\" {\n  provider = aws.target\n  name     = \"AdminAccessSSOFromRoot\"\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\",\n    Statement = [\n      {\n        Effect = \"Allow\",\n        Principal = {\n          AWS = \"arn:aws:iam::${var.root_account_id}:root\"\n        },\n        Action = \"sts:AssumeRole\"\n      }\n    ]\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AWS_61", "ruleIndex": 0, "level": "error", "attachments": [], "message": {"text": "Ensure AWS IAM policy does not allow assume role permission across all services"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/main/nonroot_account/main.tf"}, "region": {"startLine": 34, "endLine": 49, "snippet": {"text": "resource \"aws_iam_role\" \"AdminAccessSSOFromRoot\" {\n  provider = aws.target\n  name     = \"AdminAccessSSOFromRoot\"\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\",\n    Statement = [\n      {\n        Effect = \"Allow\",\n        Principal = {\n          AWS = \"arn:aws:iam::${var.root_account_id}:root\"\n        },\n        Action = \"sts:AssumeRole\"\n      }\n    ]\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AWS_61", "ruleIndex": 0, "level": "error", "attachments": [], "message": {"text": "Ensure AWS IAM policy does not allow assume role permission across all services"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/main/stage_account/main.tf"}, "region": {"startLine": 47, "endLine": 62, "snippet": {"text": "resource \"aws_iam_role\" \"AdminAccessSSOFromRoot\" {\n  provider = aws.target\n  name     = \"AdminAccessSSOFromRoot\"\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\",\n    Statement = [\n      {\n        Effect = \"Allow\",\n        Principal = {\n          AWS = \"arn:aws:iam::${var.root_account_id}:root\"\n        },\n        Action = \"sts:AssumeRole\"\n      }\n    ]\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AWS_53", "ruleIndex": 1, "level": "error", "attachments": [], "message": {"text": "Ensure S3 bucket has block public ACLS enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/main/stage_account/main.tf"}, "region": {"startLine": 95, "endLine": 103, "snippet": {"text": "resource \"aws_s3_bucket_public_access_block\" \"static_website_public_access_block\" {\n  provider = aws.target\n  bucket   = aws_s3_bucket.static_website.id\n\n  block_public_acls       = false\n  block_public_policy     = false\n  ignore_public_acls      = false\n  restrict_public_buckets = false\n}\n"}}}}]}, {"ruleId": "CKV_AWS_54", "ruleIndex": 2, "level": "error", "attachments": [], "message": {"text": "Ensure S3 bucket has block public policy enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/main/stage_account/main.tf"}, "region": {"startLine": 95, "endLine": 103, "snippet": {"text": "resource \"aws_s3_bucket_public_access_block\" \"static_website_public_access_block\" {\n  provider = aws.target\n  bucket   = aws_s3_bucket.static_website.id\n\n  block_public_acls       = false\n  block_public_policy     = false\n  ignore_public_acls      = false\n  restrict_public_buckets = false\n}\n"}}}}]}, {"ruleId": "CKV_AWS_55", "ruleIndex": 3, "level": "error", "attachments": [], "message": {"text": "Ensure S3 bucket has ignore public ACLs enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/main/stage_account/main.tf"}, "region": {"startLine": 95, "endLine": 103, "snippet": {"text": "resource \"aws_s3_bucket_public_access_block\" \"static_website_public_access_block\" {\n  provider = aws.target\n  bucket   = aws_s3_bucket.static_website.id\n\n  block_public_acls       = false\n  block_public_policy     = false\n  ignore_public_acls      = false\n  restrict_public_buckets = false\n}\n"}}}}]}, {"ruleId": "CKV_AWS_56", "ruleIndex": 4, "level": "error", "attachments": [], "message": {"text": "Ensure S3 bucket has 'restrict_public_buckets' enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/main/stage_account/main.tf"}, "region": {"startLine": 95, "endLine": 103, "snippet": {"text": "resource \"aws_s3_bucket_public_access_block\" \"static_website_public_access_block\" {\n  provider = aws.target\n  bucket   = aws_s3_bucket.static_website.id\n\n  block_public_acls       = false\n  block_public_policy     = false\n  ignore_public_acls      = false\n  restrict_public_buckets = false\n}\n"}}}}]}, {"ruleId": "CKV_AWS_338", "ruleIndex": 5, "level": "error", "attachments": [], "message": {"text": "Ensure CloudWatch log groups retains logs for at least 1 year"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/main/stage_account_0/main.tf"}, "region": {"startLine": 72, "endLine": 76, "snippet": {"text": "resource \"aws_cloudwatch_log_group\" \"lambda_log_group\" {\n  provider          = aws.target\n  name              = \"/aws/lambda/${var.account_name}\"\n  retention_in_days = 14\n}\n"}}}}]}, {"ruleId": "CKV_AWS_158", "ruleIndex": 6, "level": "error", "attachments": [], "message": {"text": "Ensure that CloudWatch Log Group is encrypted by KMS"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/main/stage_account_0/main.tf"}, "region": {"startLine": 72, "endLine": 76, "snippet": {"text": "resource \"aws_cloudwatch_log_group\" \"lambda_log_group\" {\n  provider          = aws.target\n  name              = \"/aws/lambda/${var.account_name}\"\n  retention_in_days = 14\n}\n"}}}}]}, {"ruleId": "CKV_AWS_120", "ruleIndex": 7, "level": "error", "attachments": [], "message": {"text": "Ensure API Gateway caching is enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/modules/api_gateway/main.tf"}, "region": {"startLine": 57, "endLine": 78, "snippet": {"text": "resource \"aws_api_gateway_stage\" \"production\" {\n  provider = aws.target\n  deployment_id = aws_api_gateway_deployment.api.id\n  rest_api_id   = aws_api_gateway_rest_api.api.id\n  stage_name    = \"production\"\n\n  access_log_settings {\n    destination_arn = aws_cloudwatch_log_group.api_gateway_logs.arn\n    format = jsonencode({\n      requestId = \"$context.requestId\",\n      ip = \"$context.identity.sourceIp\",\n      caller = \"$context.identity.caller\",\n      user = \"$context.identity.user\",\n      requestTime = \"$context.requestTime\",\n      httpMethod = \"$context.httpMethod\",\n      resourcePath = \"$context.resourcePath\",\n      status = \"$context.status\",\n      protocol = \"$context.protocol\",\n      responseLength = \"$context.responseLength\"\n    })\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_73", "ruleIndex": 8, "level": "error", "attachments": [], "message": {"text": "Ensure API Gateway has X-Ray Tracing enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/modules/api_gateway/main.tf"}, "region": {"startLine": 57, "endLine": 78, "snippet": {"text": "resource \"aws_api_gateway_stage\" \"production\" {\n  provider = aws.target\n  deployment_id = aws_api_gateway_deployment.api.id\n  rest_api_id   = aws_api_gateway_rest_api.api.id\n  stage_name    = \"production\"\n\n  access_log_settings {\n    destination_arn = aws_cloudwatch_log_group.api_gateway_logs.arn\n    format = jsonencode({\n      requestId = \"$context.requestId\",\n      ip = \"$context.identity.sourceIp\",\n      caller = \"$context.identity.caller\",\n      user = \"$context.identity.user\",\n      requestTime = \"$context.requestTime\",\n      httpMethod = \"$context.httpMethod\",\n      resourcePath = \"$context.resourcePath\",\n      status = \"$context.status\",\n      protocol = \"$context.protocol\",\n      responseLength = \"$context.responseLength\"\n    })\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_308", "ruleIndex": 9, "level": "error", "attachments": [], "message": {"text": "Ensure API Gateway method setting caching is set to encrypted"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/modules/api_gateway/main.tf"}, "region": {"startLine": 80, "endLine": 91, "snippet": {"text": "resource \"aws_api_gateway_method_settings\" \"production\" {\n  provider = aws.target\n  rest_api_id = aws_api_gateway_rest_api.api.id\n  stage_name  = aws_api_gateway_stage.production.stage_name\n  method_path = \"*/*\"\n\n  settings {\n    logging_level    = \"INFO\"\n    data_trace_enabled = false\n    caching_enabled = true\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_290", "ruleIndex": 10, "level": "error", "attachments": [], "message": {"text": "Ensure IAM policies does not allow write access without constraints"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/modules/api_gateway/main.tf"}, "region": {"startLine": 109, "endLine": 130, "snippet": {"text": "resource \"aws_iam_role_policy\" \"api_gateway_cloudwatch_policy\" {\n  provider = aws.target\n  name = \"api-gateway-cloudwatch-policy\"\n  role = aws_iam_role.api_gateway_role.id\n\n  policy = jsonencode({\n    Version = \"2012-10-17\",\n    Statement = [\n      {\n        Effect = \"Allow\",\n        Action = [\n          \"logs:CreateLogGroup\",\n          \"logs:CreateLogStream\",\n          \"logs:PutLogEvents\",\n          \"logs:DescribeLogGroups\",\n          \"logs:DescribeLogStreams\"\n        ],\n        Resource = \"*\"\n      }\n    ]\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AWS_355", "ruleIndex": 11, "level": "error", "attachments": [], "message": {"text": "Ensure no IAM policies documents allow \"*\" as a statement's resource for restrictable actions"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/modules/api_gateway/main.tf"}, "region": {"startLine": 109, "endLine": 130, "snippet": {"text": "resource \"aws_iam_role_policy\" \"api_gateway_cloudwatch_policy\" {\n  provider = aws.target\n  name = \"api-gateway-cloudwatch-policy\"\n  role = aws_iam_role.api_gateway_role.id\n\n  policy = jsonencode({\n    Version = \"2012-10-17\",\n    Statement = [\n      {\n        Effect = \"Allow\",\n        Action = [\n          \"logs:CreateLogGroup\",\n          \"logs:CreateLogStream\",\n          \"logs:PutLogEvents\",\n          \"logs:DescribeLogGroups\",\n          \"logs:DescribeLogStreams\"\n        ],\n        Resource = \"*\"\n      }\n    ]\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AWS_61", "ruleIndex": 0, "level": "error", "attachments": [], "message": {"text": "Ensure AWS IAM policy does not allow assume role permission across all services"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/modules/ecr/main.tf"}, "region": {"startLine": 58, "endLine": 74, "snippet": {"text": "resource \"aws_iam_role\" \"cross_account_ecr_read_role\" {\n  provider = aws.target\n  name = \"cross_account_ecr_read_role\"\n  assume_role_policy = jsonencode({\n    \"Version\" = \"2012-10-17\",\n    \"Statement\" = [\n      {\n        \"Effect\" = \"Allow\",\n        \"Action\" = \"sts:AssumeRole\",\n        \"Principal\" = {\n          \"AWS\" : \"arn:aws:iam::${var.development_account_id}:root\",\n          \"Service\" : \"lambda.amazonaws.com\"\n        }\n      }\n    ]\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AWS_163", "ruleIndex": 12, "level": "error", "attachments": [], "message": {"text": "Ensure ECR image scanning on push is enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/modules/ecr/main.tf"}, "region": {"startLine": 134, "endLine": 141, "snippet": {"text": "resource \"aws_ecr_repository\" \"lambda_repo\" {\n  provider = aws.target\n  for_each = {\n    for key, value in jsondecode(file(\"${var.manifest_file}\")) : key => value\n    if value.type == \"lambda\"\n  }\n  name = \"${split(\":\", each.value.image)[0]}\"\n}\n"}}}}]}, {"ruleId": "CKV_AWS_136", "ruleIndex": 13, "level": "error", "attachments": [], "message": {"text": "Ensure that ECR repositories are encrypted using KMS"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/modules/ecr/main.tf"}, "region": {"startLine": 134, "endLine": 141, "snippet": {"text": "resource \"aws_ecr_repository\" \"lambda_repo\" {\n  provider = aws.target\n  for_each = {\n    for key, value in jsondecode(file(\"${var.manifest_file}\")) : key => value\n    if value.type == \"lambda\"\n  }\n  name = \"${split(\":\", each.value.image)[0]}\"\n}\n"}}}}]}, {"ruleId": "CKV_AWS_51", "ruleIndex": 14, "level": "error", "attachments": [], "message": {"text": "Ensure ECR Image Tags are immutable"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/modules/ecr/main.tf"}, "region": {"startLine": 134, "endLine": 141, "snippet": {"text": "resource \"aws_ecr_repository\" \"lambda_repo\" {\n  provider = aws.target\n  for_each = {\n    for key, value in jsondecode(file(\"${var.manifest_file}\")) : key => value\n    if value.type == \"lambda\"\n  }\n  name = \"${split(\":\", each.value.image)[0]}\"\n}\n"}}}}]}, {"ruleId": "CKV_AWS_70", "ruleIndex": 15, "level": "error", "attachments": [], "message": {"text": "Ensure S3 bucket does not allow an action with any Principal"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/modules/interface_0/main.tf"}, "region": {"startLine": 157, "endLine": 172, "snippet": {"text": "resource \"aws_s3_bucket_policy\" \"zudellio_bucket_policy\" {\n  provider = aws.target\n  bucket = aws_s3_bucket.static_website.id\n\n  policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Effect = \"Allow\"\n        Principal = \"*\"\n        Action = \"s3:GetObject\"\n        Resource = \"${aws_s3_bucket.static_website.arn}/*\"\n      }\n    ]\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AWS_50", "ruleIndex": 16, "level": "error", "attachments": [], "message": {"text": "X-Ray tracing is enabled for Lambda"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/modules/lambdas/main.tf"}, "region": {"startLine": 91, "endLine": 107, "snippet": {"text": "resource \"aws_lambda_function\" \"lambda\" {\n  lifecycle {\n    ignore_changes = [\n      image_uri,\n    ]\n    create_before_destroy = true\n  }\n\n  for_each      = var.repositories\n  provider      = aws.target\n  function_name = each.key\n  role          = aws_iam_role.lambda_execution_role.arn\n  package_type  = \"Image\"\n  timeout       = 15\n\n  image_uri = \"${each.value.repository_url}:${var.image_tag}\"\n}\n"}}}}]}, {"ruleId": "CKV_AWS_117", "ruleIndex": 17, "level": "error", "attachments": [], "message": {"text": "Ensure that AWS Lambda function is configured inside a VPC"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/modules/lambdas/main.tf"}, "region": {"startLine": 91, "endLine": 107, "snippet": {"text": "resource \"aws_lambda_function\" \"lambda\" {\n  lifecycle {\n    ignore_changes = [\n      image_uri,\n    ]\n    create_before_destroy = true\n  }\n\n  for_each      = var.repositories\n  provider      = aws.target\n  function_name = each.key\n  role          = aws_iam_role.lambda_execution_role.arn\n  package_type  = \"Image\"\n  timeout       = 15\n\n  image_uri = \"${each.value.repository_url}:${var.image_tag}\"\n}\n"}}}}]}, {"ruleId": "CKV_AWS_116", "ruleIndex": 18, "level": "error", "attachments": [], "message": {"text": "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/modules/lambdas/main.tf"}, "region": {"startLine": 91, "endLine": 107, "snippet": {"text": "resource \"aws_lambda_function\" \"lambda\" {\n  lifecycle {\n    ignore_changes = [\n      image_uri,\n    ]\n    create_before_destroy = true\n  }\n\n  for_each      = var.repositories\n  provider      = aws.target\n  function_name = each.key\n  role          = aws_iam_role.lambda_execution_role.arn\n  package_type  = \"Image\"\n  timeout       = 15\n\n  image_uri = \"${each.value.repository_url}:${var.image_tag}\"\n}\n"}}}}]}, {"ruleId": "CKV_AWS_272", "ruleIndex": 19, "level": "error", "attachments": [], "message": {"text": "Ensure AWS Lambda function is configured to validate code-signing"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/modules/lambdas/main.tf"}, "region": {"startLine": 91, "endLine": 107, "snippet": {"text": "resource \"aws_lambda_function\" \"lambda\" {\n  lifecycle {\n    ignore_changes = [\n      image_uri,\n    ]\n    create_before_destroy = true\n  }\n\n  for_each      = var.repositories\n  provider      = aws.target\n  function_name = each.key\n  role          = aws_iam_role.lambda_execution_role.arn\n  package_type  = \"Image\"\n  timeout       = 15\n\n  image_uri = \"${each.value.repository_url}:${var.image_tag}\"\n}\n"}}}}]}, {"ruleId": "CKV_AWS_115", "ruleIndex": 20, "level": "error", "attachments": [], "message": {"text": "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/modules/lambdas/main.tf"}, "region": {"startLine": 91, "endLine": 107, "snippet": {"text": "resource \"aws_lambda_function\" \"lambda\" {\n  lifecycle {\n    ignore_changes = [\n      image_uri,\n    ]\n    create_before_destroy = true\n  }\n\n  for_each      = var.repositories\n  provider      = aws.target\n  function_name = each.key\n  role          = aws_iam_role.lambda_execution_role.arn\n  package_type  = \"Image\"\n  timeout       = 15\n\n  image_uri = \"${each.value.repository_url}:${var.image_tag}\"\n}\n"}}}}]}, {"ruleId": "CKV_AWS_28", "ruleIndex": 21, "level": "error", "attachments": [], "message": {"text": "Ensure DynamoDB point in time recovery (backup) is enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/modules/persistence/main.tf"}, "region": {"startLine": 1, "endLine": 9, "snippet": {"text": "resource \"aws_dynamodb_table\" \"zudellio_contact\" {\n  name         = \"zudellio_contact\"\n  billing_mode = \"PAY_PER_REQUEST\"\n  hash_key     = \"id\"\n  attribute {\n    name = \"id\"\n    type = \"S\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_119", "ruleIndex": 22, "level": "error", "attachments": [], "message": {"text": "Ensure DynamoDB Tables are encrypted using a KMS Customer Managed CMK"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/modules/persistence/main.tf"}, "region": {"startLine": 1, "endLine": 9, "snippet": {"text": "resource \"aws_dynamodb_table\" \"zudellio_contact\" {\n  name         = \"zudellio_contact\"\n  billing_mode = \"PAY_PER_REQUEST\"\n  hash_key     = \"id\"\n  attribute {\n    name = \"id\"\n    type = \"S\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_28", "ruleIndex": 21, "level": "error", "attachments": [], "message": {"text": "Ensure DynamoDB point in time recovery (backup) is enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/modules/tf_state_bootstrap/main.tf"}, "region": {"startLine": 48, "endLine": 57, "snippet": {"text": "resource \"aws_dynamodb_table\" \"terraform_dynamodb_locks\" {\n  name         = \"terraform-locks\"\n  billing_mode = \"PAY_PER_REQUEST\"\n  hash_key     = \"LockID\"\n\n  attribute {\n    name = \"LockID\"\n    type = \"S\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_119", "ruleIndex": 22, "level": "error", "attachments": [], "message": {"text": "Ensure DynamoDB Tables are encrypted using a KMS Customer Managed CMK"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/modules/tf_state_bootstrap/main.tf"}, "region": {"startLine": 48, "endLine": 57, "snippet": {"text": "resource \"aws_dynamodb_table\" \"terraform_dynamodb_locks\" {\n  name         = \"terraform-locks\"\n  billing_mode = \"PAY_PER_REQUEST\"\n  hash_key     = \"LockID\"\n\n  attribute {\n    name = \"LockID\"\n    type = \"S\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_DOCKER_2", "ruleIndex": 23, "level": "error", "attachments": [], "message": {"text": "Ensure that HEALTHCHECK instructions have been added to container images"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "lambdas/healthcheck/get/Dockerfile"}, "region": {"startLine": 1, "endLine": 13, "snippet": {"text": "# Use the official AWS Lambda Python 3.10 base image\nFROM public.ecr.aws/lambda/python:3.10\n\n# Set the working directory\nWORKDIR /var/task\n\n# Copy the rest of the application code\nCOPY . .\n\nRUN pip install -r ./requirements.txt\n\n# Set the CMD to your handler (could be app.lambda_handler or similar)\nCMD [\"handler.lambda_handler\"]"}}}}]}, {"ruleId": "CKV_DOCKER_3", "ruleIndex": 24, "level": "error", "attachments": [], "message": {"text": "Ensure that a user for the container has been created"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "lambdas/healthcheck/get/Dockerfile"}, "region": {"startLine": 1, "endLine": 13, "snippet": {"text": "# Use the official AWS Lambda Python 3.10 base image\nFROM public.ecr.aws/lambda/python:3.10\n\n# Set the working directory\nWORKDIR /var/task\n\n# Copy the rest of the application code\nCOPY . .\n\nRUN pip install -r ./requirements.txt\n\n# Set the CMD to your handler (could be app.lambda_handler or similar)\nCMD [\"handler.lambda_handler\"]"}}}}]}, {"ruleId": "CKV_DOCKER_2", "ruleIndex": 23, "level": "error", "attachments": [], "message": {"text": "Ensure that HEALTHCHECK instructions have been added to container images"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "lambdas/contact/post/Dockerfile"}, "region": {"startLine": 1, "endLine": 13, "snippet": {"text": "# Use the official AWS Lambda Python 3.10 base image\nFROM public.ecr.aws/lambda/python:3.10\n\n# Set the working directory\nWORKDIR /var/task\n\n# Copy the rest of the application code\nCOPY . .\n\nRUN pip install -r requirements.txt\n\n# Set the CMD to your handler (could be app.lambda_handler or similar)\nCMD [\"handler.lambda_handler\"]"}}}}]}, {"ruleId": "CKV_DOCKER_3", "ruleIndex": 24, "level": "error", "attachments": [], "message": {"text": "Ensure that a user for the container has been created"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "lambdas/contact/post/Dockerfile"}, "region": {"startLine": 1, "endLine": 13, "snippet": {"text": "# Use the official AWS Lambda Python 3.10 base image\nFROM public.ecr.aws/lambda/python:3.10\n\n# Set the working directory\nWORKDIR /var/task\n\n# Copy the rest of the application code\nCOPY . .\n\nRUN pip install -r requirements.txt\n\n# Set the CMD to your handler (could be app.lambda_handler or similar)\nCMD [\"handler.lambda_handler\"]"}}}}]}, {"ruleId": "CKV_DOCKER_2", "ruleIndex": 23, "level": "error", "attachments": [], "message": {"text": "Ensure that HEALTHCHECK instructions have been added to container images"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "lambdas/url_rewrite/get/Dockerfile"}, "region": {"startLine": 1, "endLine": 13, "snippet": {"text": "# Use the official AWS Lambda Python 3.10 base image\nFROM public.ecr.aws/lambda/python:3.10\n\n# Set the working directory\nWORKDIR /var/task\n\n# Copy the rest of the application code\nCOPY . .\n\nRUN pip install -r ./requirements.txt\n\n# Set the CMD to your handler (could be app.lambda_handler or similar)\nCMD [\"handler.lambda_handler\"]"}}}}]}, {"ruleId": "CKV_DOCKER_3", "ruleIndex": 24, "level": "error", "attachments": [], "message": {"text": "Ensure that a user for the container has been created"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "lambdas/url_rewrite/get/Dockerfile"}, "region": {"startLine": 1, "endLine": 13, "snippet": {"text": "# Use the official AWS Lambda Python 3.10 base image\nFROM public.ecr.aws/lambda/python:3.10\n\n# Set the working directory\nWORKDIR /var/task\n\n# Copy the rest of the application code\nCOPY . .\n\nRUN pip install -r ./requirements.txt\n\n# Set the CMD to your handler (could be app.lambda_handler or similar)\nCMD [\"handler.lambda_handler\"]"}}}}]}]}]}