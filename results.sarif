{"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json", "version": "2.1.0", "runs": [{"tool": {"driver": {"name": "Checkov", "version": "3.2.310", "informationUri": "https://checkov.io", "rules": [{"id": "CKV_AWS_61", "name": "Ensure AWS IAM policy does not allow assume role permission across all services", "shortDescription": {"text": "Ensure AWS IAM policy does not allow assume role permission across all services"}, "fullDescription": {"text": "Ensure AWS IAM policy does not allow assume role permission across all services"}, "help": {"text": "Ensure AWS IAM policy does not allow assume role permission across all services\nResource: module.monitoring.aws_iam_role.AdminAccessSSOFromRoot"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-iam-policies/bc-aws-iam-45"}, {"id": "CKV_AWS_53", "name": "Ensure S3 bucket has block public ACLS enabled", "shortDescription": {"text": "Ensure S3 bucket has block public ACLS enabled"}, "fullDescription": {"text": "Ensure S3 bucket has block public ACLS enabled"}, "help": {"text": "Ensure S3 bucket has block public ACLS enabled\nResource: module.production.aws_s3_bucket_public_access_block.static_website_public_access_block"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/bc-aws-s3-19"}, {"id": "CKV_AWS_54", "name": "Ensure S3 bucket has block public policy enabled", "shortDescription": {"text": "Ensure S3 bucket has block public policy enabled"}, "fullDescription": {"text": "Ensure S3 bucket has block public policy enabled"}, "help": {"text": "Ensure S3 bucket has block public policy enabled\nResource: module.production.aws_s3_bucket_public_access_block.static_website_public_access_block"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/bc-aws-s3-20"}, {"id": "CKV_AWS_55", "name": "Ensure S3 bucket has ignore public ACLs enabled", "shortDescription": {"text": "Ensure S3 bucket has ignore public ACLs enabled"}, "fullDescription": {"text": "Ensure S3 bucket has ignore public ACLs enabled"}, "help": {"text": "Ensure S3 bucket has ignore public ACLs enabled\nResource: module.production.aws_s3_bucket_public_access_block.static_website_public_access_block"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/bc-aws-s3-21"}, {"id": "CKV_AWS_56", "name": "Ensure S3 bucket has 'restrict_public_buckets' enabled", "shortDescription": {"text": "Ensure S3 bucket has 'restrict_public_buckets' enabled"}, "fullDescription": {"text": "Ensure S3 bucket has 'restrict_public_buckets' enabled"}, "help": {"text": "Ensure S3 bucket has 'restrict_public_buckets' enabled\nResource: module.production.aws_s3_bucket_public_access_block.static_website_public_access_block"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/bc-aws-s3-22"}, {"id": "CKV_AWS_338", "name": "Ensure CloudWatch log groups retains logs for at least 1 year", "shortDescription": {"text": "Ensure CloudWatch log groups retains logs for at least 1 year"}, "fullDescription": {"text": "Ensure CloudWatch log groups retains logs for at least 1 year"}, "help": {"text": "Ensure CloudWatch log groups retains logs for at least 1 year\nResource: module.development.aws_cloudwatch_log_group.lambda_log_group"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/bc-aws-338"}, {"id": "CKV_AWS_158", "name": "Ensure that CloudWatch Log Group is encrypted by KMS", "shortDescription": {"text": "Ensure that CloudWatch Log Group is encrypted by KMS"}, "fullDescription": {"text": "Ensure that CloudWatch Log Group is encrypted by KMS"}, "help": {"text": "Ensure that CloudWatch Log Group is encrypted by KMS\nResource: module.development.aws_cloudwatch_log_group.lambda_log_group"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-cloudwatch-log-group-is-encrypted-by-kms"}, {"id": "CKV_AWS_68", "name": "CloudFront Distribution should have WAF enabled", "shortDescription": {"text": "CloudFront Distribution should have WAF enabled"}, "fullDescription": {"text": "CloudFront Distribution should have WAF enabled"}, "help": {"text": "CloudFront Distribution should have WAF enabled\nResource: module.infrastructure.module.cloudfront.aws_cloudfront_distribution.s3_distribution"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-general-27"}, {"id": "CKV_AWS_310", "name": "Ensure CloudFront distributions should have origin failover configured", "shortDescription": {"text": "Ensure CloudFront distributions should have origin failover configured"}, "fullDescription": {"text": "Ensure CloudFront distributions should have origin failover configured"}, "help": {"text": "Ensure CloudFront distributions should have origin failover configured\nResource: module.infrastructure.module.cloudfront.aws_cloudfront_distribution.s3_distribution"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-310"}, {"id": "CKV_AWS_70", "name": "Ensure S3 bucket does not allow an action with any Principal", "shortDescription": {"text": "Ensure S3 bucket does not allow an action with any Principal"}, "fullDescription": {"text": "Ensure S3 bucket does not allow an action with any Principal"}, "help": {"text": "Ensure S3 bucket does not allow an action with any Principal\nResource: module.development.module.interface.aws_s3_bucket_policy.zudellio_bucket_policy"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/bc-aws-s3-23"}, {"id": "CKV_AWS_50", "name": "X-Ray tracing is enabled for Lambda", "shortDescription": {"text": "X-Ray tracing is enabled for Lambda"}, "fullDescription": {"text": "X-Ray tracing is enabled for Lambda"}, "help": {"text": "X-Ray tracing is enabled for Lambda\nResource: module.development.module.lambdas.aws_lambda_function.lambda"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-serverless-policies/bc-aws-serverless-4"}, {"id": "CKV_AWS_117", "name": "Ensure that AWS Lambda function is configured inside a VPC", "shortDescription": {"text": "Ensure that AWS Lambda function is configured inside a VPC"}, "fullDescription": {"text": "Ensure that AWS Lambda function is configured inside a VPC"}, "help": {"text": "Ensure that AWS Lambda function is configured inside a VPC\nResource: module.development.module.lambdas.aws_lambda_function.lambda"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-aws-lambda-function-is-configured-inside-a-vpc-1"}, {"id": "CKV_AWS_116", "name": "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)", "shortDescription": {"text": "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)"}, "fullDescription": {"text": "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)"}, "help": {"text": "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)\nResource: module.development.module.lambdas.aws_lambda_function.lambda"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-aws-lambda-function-is-configured-for-a-dead-letter-queue-dlq"}, {"id": "CKV_AWS_272", "name": "Ensure AWS Lambda function is configured to validate code-signing", "shortDescription": {"text": "Ensure AWS Lambda function is configured to validate code-signing"}, "fullDescription": {"text": "Ensure AWS Lambda function is configured to validate code-signing"}, "help": {"text": "Ensure AWS Lambda function is configured to validate code-signing\nResource: module.development.module.lambdas.aws_lambda_function.lambda"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-272"}, {"id": "CKV_AWS_115", "name": "Ensure that AWS Lambda function is configured for function-level concurrent execution limit", "shortDescription": {"text": "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"}, "fullDescription": {"text": "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"}, "help": {"text": "Ensure that AWS Lambda function is configured for function-level concurrent execution limit\nResource: module.development.module.lambdas.aws_lambda_function.lambda"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-aws-lambda-function-is-configured-for-function-level-concurrent-execution-limit"}, {"id": "CKV_AWS_28", "name": "Ensure DynamoDB point in time recovery (backup) is enabled", "shortDescription": {"text": "Ensure DynamoDB point in time recovery (backup) is enabled"}, "fullDescription": {"text": "Ensure DynamoDB point in time recovery (backup) is enabled"}, "help": {"text": "Ensure DynamoDB point in time recovery (backup) is enabled\nResource: aws_dynamodb_table.zudellio_contact"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/general-6"}, {"id": "CKV_AWS_119", "name": "Ensure DynamoDB Tables are encrypted using a KMS Customer Managed CMK", "shortDescription": {"text": "Ensure DynamoDB Tables are encrypted using a KMS Customer Managed CMK"}, "fullDescription": {"text": "Ensure DynamoDB Tables are encrypted using a KMS Customer Managed CMK"}, "help": {"text": "Ensure DynamoDB Tables are encrypted using a KMS Customer Managed CMK\nResource: aws_dynamodb_table.zudellio_contact"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-52"}, {"id": "CKV_DOCKER_2", "name": "Ensure that HEALTHCHECK instructions have been added to container images", "shortDescription": {"text": "Ensure that HEALTHCHECK instructions have been added to container images"}, "fullDescription": {"text": "Ensure that HEALTHCHECK instructions have been added to container images"}, "help": {"text": "Ensure that HEALTHCHECK instructions have been added to container images\nResource: /lambdas/contact/post/Dockerfile."}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-that-healthcheck-instructions-have-been-added-to-container-images"}, {"id": "CKV_DOCKER_3", "name": "Ensure that a user for the container has been created", "shortDescription": {"text": "Ensure that a user for the container has been created"}, "fullDescription": {"text": "Ensure that a user for the container has been created"}, "help": {"text": "Ensure that a user for the container has been created\nResource: /lambdas/contact/post/Dockerfile."}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-that-a-user-for-the-container-has-been-created"}], "organization": "bridgecrew"}}, "results": [{"ruleId": "CKV_AWS_61", "ruleIndex": 0, "level": "error", "attachments": [], "message": {"text": "Ensure AWS IAM policy does not allow assume role permission across all services"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/main/nonroot_account/main.tf"}, "region": {"startLine": 34, "endLine": 49, "snippet": {"text": "resource \"aws_iam_role\" \"AdminAccessSSOFromRoot\" {\n  provider = aws.target\n  name     = \"AdminAccessSSOFromRoot\"\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\",\n    Statement = [\n      {\n        Effect = \"Allow\",\n        Principal = {\n          AWS = \"arn:aws:iam::${var.root_account_id}:root\"\n        },\n        Action = \"sts:AssumeRole\"\n      }\n    ]\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AWS_61", "ruleIndex": 0, "level": "error", "attachments": [], "message": {"text": "Ensure AWS IAM policy does not allow assume role permission across all services"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/main/nonroot_account/main.tf"}, "region": {"startLine": 34, "endLine": 49, "snippet": {"text": "resource \"aws_iam_role\" \"AdminAccessSSOFromRoot\" {\n  provider = aws.target\n  name     = \"AdminAccessSSOFromRoot\"\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\",\n    Statement = [\n      {\n        Effect = \"Allow\",\n        Principal = {\n          AWS = \"arn:aws:iam::${var.root_account_id}:root\"\n        },\n        Action = \"sts:AssumeRole\"\n      }\n    ]\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AWS_61", "ruleIndex": 0, "level": "error", "attachments": [], "message": {"text": "Ensure AWS IAM policy does not allow assume role permission across all services"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/main/stage_account/main.tf"}, "region": {"startLine": 47, "endLine": 62, "snippet": {"text": "resource \"aws_iam_role\" \"AdminAccessSSOFromRoot\" {\n  provider = aws.target\n  name     = \"AdminAccessSSOFromRoot\"\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\",\n    Statement = [\n      {\n        Effect = \"Allow\",\n        Principal = {\n          AWS = \"arn:aws:iam::${var.root_account_id}:root\"\n        },\n        Action = \"sts:AssumeRole\"\n      }\n    ]\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AWS_53", "ruleIndex": 1, "level": "error", "attachments": [], "message": {"text": "Ensure S3 bucket has block public ACLS enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/main/stage_account/main.tf"}, "region": {"startLine": 100, "endLine": 108, "snippet": {"text": "resource \"aws_s3_bucket_public_access_block\" \"static_website_public_access_block\" {\n  provider = aws.target\n  bucket   = aws_s3_bucket.static_website.id\n\n  block_public_acls       = false\n  block_public_policy     = false\n  ignore_public_acls      = false\n  restrict_public_buckets = false\n}\n"}}}}]}, {"ruleId": "CKV_AWS_54", "ruleIndex": 2, "level": "error", "attachments": [], "message": {"text": "Ensure S3 bucket has block public policy enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/main/stage_account/main.tf"}, "region": {"startLine": 100, "endLine": 108, "snippet": {"text": "resource \"aws_s3_bucket_public_access_block\" \"static_website_public_access_block\" {\n  provider = aws.target\n  bucket   = aws_s3_bucket.static_website.id\n\n  block_public_acls       = false\n  block_public_policy     = false\n  ignore_public_acls      = false\n  restrict_public_buckets = false\n}\n"}}}}]}, {"ruleId": "CKV_AWS_55", "ruleIndex": 3, "level": "error", "attachments": [], "message": {"text": "Ensure S3 bucket has ignore public ACLs enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/main/stage_account/main.tf"}, "region": {"startLine": 100, "endLine": 108, "snippet": {"text": "resource \"aws_s3_bucket_public_access_block\" \"static_website_public_access_block\" {\n  provider = aws.target\n  bucket   = aws_s3_bucket.static_website.id\n\n  block_public_acls       = false\n  block_public_policy     = false\n  ignore_public_acls      = false\n  restrict_public_buckets = false\n}\n"}}}}]}, {"ruleId": "CKV_AWS_56", "ruleIndex": 4, "level": "error", "attachments": [], "message": {"text": "Ensure S3 bucket has 'restrict_public_buckets' enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/main/stage_account/main.tf"}, "region": {"startLine": 100, "endLine": 108, "snippet": {"text": "resource \"aws_s3_bucket_public_access_block\" \"static_website_public_access_block\" {\n  provider = aws.target\n  bucket   = aws_s3_bucket.static_website.id\n\n  block_public_acls       = false\n  block_public_policy     = false\n  ignore_public_acls      = false\n  restrict_public_buckets = false\n}\n"}}}}]}, {"ruleId": "CKV_AWS_338", "ruleIndex": 5, "level": "error", "attachments": [], "message": {"text": "Ensure CloudWatch log groups retains logs for at least 1 year"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/main/stage_account_0/main.tf"}, "region": {"startLine": 72, "endLine": 76, "snippet": {"text": "resource \"aws_cloudwatch_log_group\" \"lambda_log_group\" {\n  provider          = aws.target\n  name              = \"/aws/lambda/${var.account_name}\"\n  retention_in_days = 14\n}\n"}}}}]}, {"ruleId": "CKV_AWS_158", "ruleIndex": 6, "level": "error", "attachments": [], "message": {"text": "Ensure that CloudWatch Log Group is encrypted by KMS"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/main/stage_account_0/main.tf"}, "region": {"startLine": 72, "endLine": 76, "snippet": {"text": "resource \"aws_cloudwatch_log_group\" \"lambda_log_group\" {\n  provider          = aws.target\n  name              = \"/aws/lambda/${var.account_name}\"\n  retention_in_days = 14\n}\n"}}}}]}, {"ruleId": "CKV_AWS_68", "ruleIndex": 7, "level": "error", "attachments": [], "message": {"text": "CloudFront Distribution should have WAF enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/modules/cloudfront/main.tf"}, "region": {"startLine": 138, "endLine": 211, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"s3_distribution\" {\n  provider = aws.target\n  origin {\n    domain_name = var.site_bucket.bucket_regional_domain_name\n    origin_id   = \"S3-${var.site_bucket.bucket}\"\n    origin_path = \"/\"\n    custom_origin_config {\n      http_port                = 80\n      https_port               = 443\n      origin_protocol_policy   = \"https-only\"\n      origin_ssl_protocols     = [\"TLSv1.2\"]\n      origin_read_timeout      = 30\n      origin_keepalive_timeout = 5\n    }\n  }\n\n  aliases = [\"zudell.io\", \"www.zudell.io\"]\n\n  enabled             = true\n  is_ipv6_enabled     = true\n  comment             = \"CloudFront distribution for serving static files from S3\"\n  default_root_object = \"index.html\"\n\n  default_cache_behavior {\n    allowed_methods  = [\"GET\", \"HEAD\"]\n    cached_methods   = [\"GET\", \"HEAD\"]\n    target_origin_id = \"S3-${var.site_bucket.bucket}\"\n\n    lambda_function_association {\n      event_type   = \"origin-request\"\n      lambda_arn   = var.url_rewrite_lambda.arn\n      include_body = false\n    }\n\n    forwarded_values {\n      query_string = false\n      cookies {\n        forward = \"none\"\n      }\n    }\n\n    viewer_protocol_policy = \"redirect-to-https\"\n    min_ttl                = 0\n    default_ttl            = 3600\n    max_ttl                = 86400\n\n    lambda_function_association {\n      event_type   = \"origin-request\"\n      lambda_arn   = var.url_rewrite_lambda.arn\n      include_body = false\n    }\n  }\n\n  restrictions {\n    geo_restriction {\n      restriction_type = \"whitelist\"\n      locations        = [\"US\", \"CA\", \"GB\", \"DE\"]\n    }\n  }\n\n  logging_config {\n    include_cookies = false\n    bucket          = \"mylogs.s3.amazonaws.com\"\n    prefix          = \"myprefix\"\n  }\n\n  viewer_certificate {\n    acm_certificate_arn            = var.certificate_arn\n    ssl_support_method             = \"sni-only\"\n    minimum_protocol_version       = \"TLSv1.2_2021\"\n  }\n\n  #web_acl_id = var.web_acl_id\n}\n"}}}}]}, {"ruleId": "CKV_AWS_310", "ruleIndex": 8, "level": "error", "attachments": [], "message": {"text": "Ensure CloudFront distributions should have origin failover configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/modules/cloudfront/main.tf"}, "region": {"startLine": 138, "endLine": 211, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"s3_distribution\" {\n  provider = aws.target\n  origin {\n    domain_name = var.site_bucket.bucket_regional_domain_name\n    origin_id   = \"S3-${var.site_bucket.bucket}\"\n    origin_path = \"/\"\n    custom_origin_config {\n      http_port                = 80\n      https_port               = 443\n      origin_protocol_policy   = \"https-only\"\n      origin_ssl_protocols     = [\"TLSv1.2\"]\n      origin_read_timeout      = 30\n      origin_keepalive_timeout = 5\n    }\n  }\n\n  aliases = [\"zudell.io\", \"www.zudell.io\"]\n\n  enabled             = true\n  is_ipv6_enabled     = true\n  comment             = \"CloudFront distribution for serving static files from S3\"\n  default_root_object = \"index.html\"\n\n  default_cache_behavior {\n    allowed_methods  = [\"GET\", \"HEAD\"]\n    cached_methods   = [\"GET\", \"HEAD\"]\n    target_origin_id = \"S3-${var.site_bucket.bucket}\"\n\n    lambda_function_association {\n      event_type   = \"origin-request\"\n      lambda_arn   = var.url_rewrite_lambda.arn\n      include_body = false\n    }\n\n    forwarded_values {\n      query_string = false\n      cookies {\n        forward = \"none\"\n      }\n    }\n\n    viewer_protocol_policy = \"redirect-to-https\"\n    min_ttl                = 0\n    default_ttl            = 3600\n    max_ttl                = 86400\n\n    lambda_function_association {\n      event_type   = \"origin-request\"\n      lambda_arn   = var.url_rewrite_lambda.arn\n      include_body = false\n    }\n  }\n\n  restrictions {\n    geo_restriction {\n      restriction_type = \"whitelist\"\n      locations        = [\"US\", \"CA\", \"GB\", \"DE\"]\n    }\n  }\n\n  logging_config {\n    include_cookies = false\n    bucket          = \"mylogs.s3.amazonaws.com\"\n    prefix          = \"myprefix\"\n  }\n\n  viewer_certificate {\n    acm_certificate_arn            = var.certificate_arn\n    ssl_support_method             = \"sni-only\"\n    minimum_protocol_version       = \"TLSv1.2_2021\"\n  }\n\n  #web_acl_id = var.web_acl_id\n}\n"}}}}]}, {"ruleId": "CKV_AWS_70", "ruleIndex": 9, "level": "error", "attachments": [], "message": {"text": "Ensure S3 bucket does not allow an action with any Principal"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/modules/interface_0/main.tf"}, "region": {"startLine": 157, "endLine": 172, "snippet": {"text": "resource \"aws_s3_bucket_policy\" \"zudellio_bucket_policy\" {\n  provider = aws.target\n  bucket = aws_s3_bucket.static_website.id\n\n  policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Effect = \"Allow\"\n        Principal = \"*\"\n        Action = \"s3:GetObject\"\n        Resource = \"${aws_s3_bucket.static_website.arn}/*\"\n      }\n    ]\n  })\n}\n"}}}}]}, {"ruleId": "CKV_AWS_50", "ruleIndex": 10, "level": "error", "attachments": [], "message": {"text": "X-Ray tracing is enabled for Lambda"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/modules/lambdas/main.tf"}, "region": {"startLine": 95, "endLine": 111, "snippet": {"text": "resource \"aws_lambda_function\" \"lambda\" {\n  lifecycle {\n    ignore_changes = [\n      image_uri,\n    ]\n    create_before_destroy = true\n  }\n\n  for_each      = var.repositories\n  provider      = aws.target\n  function_name = each.key\n  role          = aws_iam_role.lambda_execution_role.arn\n  package_type  = \"Image\"\n  timeout       = 15\n\n  image_uri = \"${each.value.repository_url}:${var.image_tag}\"\n}\n"}}}}]}, {"ruleId": "CKV_AWS_117", "ruleIndex": 11, "level": "error", "attachments": [], "message": {"text": "Ensure that AWS Lambda function is configured inside a VPC"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/modules/lambdas/main.tf"}, "region": {"startLine": 95, "endLine": 111, "snippet": {"text": "resource \"aws_lambda_function\" \"lambda\" {\n  lifecycle {\n    ignore_changes = [\n      image_uri,\n    ]\n    create_before_destroy = true\n  }\n\n  for_each      = var.repositories\n  provider      = aws.target\n  function_name = each.key\n  role          = aws_iam_role.lambda_execution_role.arn\n  package_type  = \"Image\"\n  timeout       = 15\n\n  image_uri = \"${each.value.repository_url}:${var.image_tag}\"\n}\n"}}}}]}, {"ruleId": "CKV_AWS_116", "ruleIndex": 12, "level": "error", "attachments": [], "message": {"text": "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/modules/lambdas/main.tf"}, "region": {"startLine": 95, "endLine": 111, "snippet": {"text": "resource \"aws_lambda_function\" \"lambda\" {\n  lifecycle {\n    ignore_changes = [\n      image_uri,\n    ]\n    create_before_destroy = true\n  }\n\n  for_each      = var.repositories\n  provider      = aws.target\n  function_name = each.key\n  role          = aws_iam_role.lambda_execution_role.arn\n  package_type  = \"Image\"\n  timeout       = 15\n\n  image_uri = \"${each.value.repository_url}:${var.image_tag}\"\n}\n"}}}}]}, {"ruleId": "CKV_AWS_272", "ruleIndex": 13, "level": "error", "attachments": [], "message": {"text": "Ensure AWS Lambda function is configured to validate code-signing"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/modules/lambdas/main.tf"}, "region": {"startLine": 95, "endLine": 111, "snippet": {"text": "resource \"aws_lambda_function\" \"lambda\" {\n  lifecycle {\n    ignore_changes = [\n      image_uri,\n    ]\n    create_before_destroy = true\n  }\n\n  for_each      = var.repositories\n  provider      = aws.target\n  function_name = each.key\n  role          = aws_iam_role.lambda_execution_role.arn\n  package_type  = \"Image\"\n  timeout       = 15\n\n  image_uri = \"${each.value.repository_url}:${var.image_tag}\"\n}\n"}}}}]}, {"ruleId": "CKV_AWS_115", "ruleIndex": 14, "level": "error", "attachments": [], "message": {"text": "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/modules/lambdas/main.tf"}, "region": {"startLine": 95, "endLine": 111, "snippet": {"text": "resource \"aws_lambda_function\" \"lambda\" {\n  lifecycle {\n    ignore_changes = [\n      image_uri,\n    ]\n    create_before_destroy = true\n  }\n\n  for_each      = var.repositories\n  provider      = aws.target\n  function_name = each.key\n  role          = aws_iam_role.lambda_execution_role.arn\n  package_type  = \"Image\"\n  timeout       = 15\n\n  image_uri = \"${each.value.repository_url}:${var.image_tag}\"\n}\n"}}}}]}, {"ruleId": "CKV_AWS_28", "ruleIndex": 15, "level": "error", "attachments": [], "message": {"text": "Ensure DynamoDB point in time recovery (backup) is enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/modules/persistence/main.tf"}, "region": {"startLine": 1, "endLine": 9, "snippet": {"text": "resource \"aws_dynamodb_table\" \"zudellio_contact\" {\n  name         = \"zudellio_contact\"\n  billing_mode = \"PAY_PER_REQUEST\"\n  hash_key     = \"id\"\n  attribute {\n    name = \"id\"\n    type = \"S\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_119", "ruleIndex": 16, "level": "error", "attachments": [], "message": {"text": "Ensure DynamoDB Tables are encrypted using a KMS Customer Managed CMK"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/modules/persistence/main.tf"}, "region": {"startLine": 1, "endLine": 9, "snippet": {"text": "resource \"aws_dynamodb_table\" \"zudellio_contact\" {\n  name         = \"zudellio_contact\"\n  billing_mode = \"PAY_PER_REQUEST\"\n  hash_key     = \"id\"\n  attribute {\n    name = \"id\"\n    type = \"S\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_28", "ruleIndex": 15, "level": "error", "attachments": [], "message": {"text": "Ensure DynamoDB point in time recovery (backup) is enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/modules/tf_state_bootstrap/main.tf"}, "region": {"startLine": 48, "endLine": 57, "snippet": {"text": "resource \"aws_dynamodb_table\" \"terraform_dynamodb_locks\" {\n  name         = \"terraform-locks\"\n  billing_mode = \"PAY_PER_REQUEST\"\n  hash_key     = \"LockID\"\n\n  attribute {\n    name = \"LockID\"\n    type = \"S\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_119", "ruleIndex": 16, "level": "error", "attachments": [], "message": {"text": "Ensure DynamoDB Tables are encrypted using a KMS Customer Managed CMK"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/modules/tf_state_bootstrap/main.tf"}, "region": {"startLine": 48, "endLine": 57, "snippet": {"text": "resource \"aws_dynamodb_table\" \"terraform_dynamodb_locks\" {\n  name         = \"terraform-locks\"\n  billing_mode = \"PAY_PER_REQUEST\"\n  hash_key     = \"LockID\"\n\n  attribute {\n    name = \"LockID\"\n    type = \"S\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_DOCKER_2", "ruleIndex": 17, "level": "error", "attachments": [], "message": {"text": "Ensure that HEALTHCHECK instructions have been added to container images"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "lambdas/contact/post/Dockerfile"}, "region": {"startLine": 1, "endLine": 13, "snippet": {"text": "# Use the official AWS Lambda Python 3.10 base image\nFROM public.ecr.aws/lambda/python:3.10\n\n# Set the working directory\nWORKDIR /var/task\n\n# Copy the rest of the application code\nCOPY . .\n\nRUN pip install -r requirements.txt\n\n# Set the CMD to your handler (could be app.lambda_handler or similar)\nCMD [\"handler.lambda_handler\"]"}}}}]}, {"ruleId": "CKV_DOCKER_3", "ruleIndex": 18, "level": "error", "attachments": [], "message": {"text": "Ensure that a user for the container has been created"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "lambdas/contact/post/Dockerfile"}, "region": {"startLine": 1, "endLine": 13, "snippet": {"text": "# Use the official AWS Lambda Python 3.10 base image\nFROM public.ecr.aws/lambda/python:3.10\n\n# Set the working directory\nWORKDIR /var/task\n\n# Copy the rest of the application code\nCOPY . .\n\nRUN pip install -r requirements.txt\n\n# Set the CMD to your handler (could be app.lambda_handler or similar)\nCMD [\"handler.lambda_handler\"]"}}}}]}, {"ruleId": "CKV_DOCKER_2", "ruleIndex": 17, "level": "error", "attachments": [], "message": {"text": "Ensure that HEALTHCHECK instructions have been added to container images"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "lambdas/healthcheck/get/Dockerfile"}, "region": {"startLine": 1, "endLine": 13, "snippet": {"text": "# Use the official AWS Lambda Python 3.10 base image\nFROM public.ecr.aws/lambda/python:3.10\n\n# Set the working directory\nWORKDIR /var/task\n\n# Copy the rest of the application code\nCOPY . .\n\nRUN pip install -r ./requirements.txt\n\n# Set the CMD to your handler (could be app.lambda_handler or similar)\nCMD [\"handler.lambda_handler\"]"}}}}]}, {"ruleId": "CKV_DOCKER_3", "ruleIndex": 18, "level": "error", "attachments": [], "message": {"text": "Ensure that a user for the container has been created"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "lambdas/healthcheck/get/Dockerfile"}, "region": {"startLine": 1, "endLine": 13, "snippet": {"text": "# Use the official AWS Lambda Python 3.10 base image\nFROM public.ecr.aws/lambda/python:3.10\n\n# Set the working directory\nWORKDIR /var/task\n\n# Copy the rest of the application code\nCOPY . .\n\nRUN pip install -r ./requirements.txt\n\n# Set the CMD to your handler (could be app.lambda_handler or similar)\nCMD [\"handler.lambda_handler\"]"}}}}]}, {"ruleId": "CKV_DOCKER_2", "ruleIndex": 17, "level": "error", "attachments": [], "message": {"text": "Ensure that HEALTHCHECK instructions have been added to container images"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "lambdas/url_rewrite/get/Dockerfile"}, "region": {"startLine": 1, "endLine": 13, "snippet": {"text": "# Use the official AWS Lambda Python 3.10 base image\nFROM public.ecr.aws/lambda/python:3.10\n\n# Set the working directory\nWORKDIR /var/task\n\n# Copy the rest of the application code\nCOPY . .\n\nRUN pip install -r ./requirements.txt\n\n# Set the CMD to your handler (could be app.lambda_handler or similar)\nCMD [\"handler.lambda_handler\"]"}}}}]}, {"ruleId": "CKV_DOCKER_3", "ruleIndex": 18, "level": "error", "attachments": [], "message": {"text": "Ensure that a user for the container has been created"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "lambdas/url_rewrite/get/Dockerfile"}, "region": {"startLine": 1, "endLine": 13, "snippet": {"text": "# Use the official AWS Lambda Python 3.10 base image\nFROM public.ecr.aws/lambda/python:3.10\n\n# Set the working directory\nWORKDIR /var/task\n\n# Copy the rest of the application code\nCOPY . .\n\nRUN pip install -r ./requirements.txt\n\n# Set the CMD to your handler (could be app.lambda_handler or similar)\nCMD [\"handler.lambda_handler\"]"}}}}]}]}]}